@page "/movies"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using TestBlazor.Models
@inject MovieService MovieService
@inject NavigationManager Navigation
@implements IAsyncDisposable

<div class="alert alert-info mb-3">
    Connection: @connectionStatus
</div>

<h3>Movies</h3>

@if (moviesList == null)
{
    <p>Loading movies...</p>
}
else
{
    <button @onclick="AddNewMovie" class="btn btn-primary mb-3">
        <i class="bi bi-plus-circle"></i> Add New Movie
    </button>

    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Title</th>
                <th>Genre</th>
                <th>Release Date</th>
                <th>Box Office</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in moviesList)
            {
                <tr>
                    <td>@movie.Title</td>
                    <td>@movie.Genre</td>
                    <td>@movie.ReleaseDate.ToString("yyyy-MM-dd")</td>
                    <td>@(movie.BoxOfficeSales?.ToString("C2") ?? "N/A")</td>
                    <td>
                        <div class="btn-group" role="group">
                            <button @onclick="@(() => EditMovie(movie.Id))"
                                    class="btn btn-sm btn-warning">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button @onclick="@(() => ConfirmDelete(movie.Id, movie.Title))"
                                    class="btn btn-sm btn-danger">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Edit/Add Movie Modal -->
@if (showEditDialog)
{
    <div class="modal fade show" style="display:block; background-color:rgba(0,0,0,0.5)" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(currentMovie.Id == 0 ? "Add New Movie" : "Edit Movie")</h5>
                    <button type="button" class="btn-close" @onclick="CloseDialog"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentMovie" OnValidSubmit="@SaveMovie">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="title" class="form-label">Title</label>
                            <InputText id="title" @bind-Value="currentMovie.Title" class="form-control" />
                            <ValidationMessage For="@(() => currentMovie.Title)" />
                        </div>

                        <div class="mb-3">
                            <label for="genre" class="form-label">Genre</label>
                            <InputText id="genre" @bind-Value="currentMovie.Genre" class="form-control" />
                            <ValidationMessage For="@(() => currentMovie.Genre)" />
                        </div>

                        <div class="mb-3">
                            <label for="releaseDate" class="form-label">Release Date</label>
                            <InputDate id="releaseDate" @bind-Value="currentMovie.ReleaseDate" class="form-control" />
                            <ValidationMessage For="@(() => currentMovie.ReleaseDate)" />
                        </div>

                        <div class="mb-3">
                            <label for="boxOffice" class="form-label">Box Office Sales ($)</label>
                            <InputNumber id="boxOffice" @bind-Value="currentMovie.BoxOfficeSales" class="form-control" />
                            <ValidationMessage For="@(() => currentMovie.BoxOfficeSales)" />
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-save"></i> Save
                            </button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseDialog">
                                <i class="bi bi-x-circle"></i> Cancel
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteConfirmation)
{
    <div class="modal fade show" style="display:block; background-color:rgba(0,0,0,0.5)" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button @onclick="CancelDelete"  type="button" class="btn-close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete <strong>@movieToDeleteTitle</strong>?</p>
                    <p>This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button  @onclick="DeleteConfirmed" type="button" class="btn btn-danger">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                    <button @onclick="CancelDelete"  type="button" class="btn btn-secondary">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Movie> moviesList;
    private Movie currentMovie = new Movie();
    private bool showEditDialog;
    private bool showDeleteConfirmation;
    private int movieToDeleteId;
    private string movieToDeleteTitle;
    private HubConnection? hubConnection;
    private string connectionStatus = "Connecting";

    protected override async Task OnInitializedAsync()
    {
        await LoadMovies();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/moviehub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.Reconnecting += error =>
        {
            connectionStatus = "Reconnecting";
            return InvokeAsync(StateHasChanged);
        };

        hubConnection.Reconnected += connectionId =>
        {
            connectionStatus = "Connected";
            return InvokeAsync(StateHasChanged);
        };

        hubConnection.Closed += error =>
        {
            connectionStatus = "Disconnected";
            return InvokeAsync(StateHasChanged);
        };

        hubConnection.On("ReceiveMovieUpdate", async () =>
        {
            await LoadMovies();
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        connectionStatus = "Connected";
    }

    private async Task LoadMovies()
    {
        moviesList = (await MovieService.GetAllMovies()).ToList();
    }

    private void AddNewMovie()
    {
        currentMovie = new Movie { ReleaseDate = DateTime.Today };
        showEditDialog = true;
    }

    private async Task EditMovie(int id)
    {
        currentMovie = await MovieService.GetMovieById(id);
        showEditDialog = true;
    }

    private async Task SaveMovie()
    {
        if (currentMovie.Id == 0)
        {
            await MovieService.CreateMovie(currentMovie);
        }
        else
        {
            await MovieService.UpdateMovie(currentMovie);
        }

        showEditDialog = false;
        await LoadMovies();
    }

    private void ConfirmDelete(int id, string title)
    {
        movieToDeleteId = id;
        movieToDeleteTitle = title;
        showDeleteConfirmation = true;
    }

    private async Task DeleteConfirmed()
    {
        if (await MovieService.DeleteMovie(movieToDeleteId))
        {
            showDeleteConfirmation = false;
            await LoadMovies();
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
    }

    private void CloseDialog()
    {
        showEditDialog = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}